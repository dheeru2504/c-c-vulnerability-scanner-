#include <iostream>
#include <cstdlib>  // For rand() and srand()
#include <ctime>    // For time()
#include <unistd.h> // For srandom(), random()
#include <stdlib.h> // For drand48() family functions

using namespace std;
int main()
{
    // Initialize random number generation with seed
    srand(time(NULL));   // Seed for rand()
    srandom(time(NULL)); // Seed for random()

    // Using rand()
    cout << "Random number using rand(): " << rand() % 10000 << endl;

    // Using random()
    cout << "Random number using random(): " << random() % 10000 << endl;

    // Initialize drand48 with seed
    srand48(time(NULL));

    // Using drand48() to generate a double precision floating point number
    cout << "Random double using drand48(): " << drand48() << endl;

    // Using lrand48() for a non-negative long integer
    cout << "Random long using lrand48(): " << lrand48() % 10000 << endl;

    // Using mrand48() for a signed long integer
    cout << "Random signed long using mrand48(): " << mrand48() % 10000 << endl;

    // Using jrand48() requires an unsigned short array as seed
    unsigned short xsubi[3] = {0, 1, 2};
    cout << "Random number using jrand48(): " << jrand48(xsubi) % 10000 << endl;

    // Using nrand48()
    cout << "Random number using nrand48(): " << nrand48(xsubi) % 10000 << endl;

    // Initialize lcong48 with a custom seed
    unsigned short param[7] = {0, 1, 2, 3, 4, 5, 6};
    lcong48(param);
    cout << "Random number using lcong48 after setting parameters: " << lrand48() % 10000 << endl;

    // Set a new state for drand48 series
    unsigned short new_state[3] = {0x1234, 0xabcd, 0x330e};
    seed48(new_state);
    cout << "Random number using drand48 with new state: " << drand48() << endl;

    return 0;
}
